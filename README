                           ZerOS
                        Always First
                        Always Best
                       Always Powerful
------------------------------------------------------------------

Release numbers
   The general release number is <major>.<minor>
   <major> indicates a radical change in the 
   underlying kernel. <minor> indicates incremental
   features and testing. NOTE: Any tagged version
   has undergone reasonably extensive testing to
   ensure that it boots in both the emulator and
   real hardware. It is meant to be a fallback in
   the case where something is going wrong in the
   testing branch.

Directory structure
   -> bootfiles
      Files related to booting with grub are here
      (such as grub.cfg and the custom initrd)
   -> cpu
      Anything related to how the cpu operates,
      such as interrupts and halting, goes here.
   -> drivers
      Anything related to controlling a piece of 
      hardware that is not the cpu goes here.
   -> fs
      Anything related to a filesystem goes here
   -> kernel
      Anything related to the basic kernel 
      functionality, such as scheduling or memory
      management, goes here.
   -> lib
      Any useful routines that are not hardware
      specific or core kernel functions.
   -> tools
      External programs that are not linked into 
      the final kernel image. For example, a custom
      initrd generator.      

Notation:
   -> #define <something>_P = This is a port
   -> #define <something>_C = This is a command
   -> #define <something>_M = This is a bit mask

Dependencies:
   Certain subsystems in the kernel require other
   parts to be working before it can be fully used.


------------------------------------------------------
Add debugging symbols to kernel while
   maintaining a flat binary to run
   nasm -f elf -F dwarf -g kernel.asm
   objcopy -O binary kernel.o kernel.bin
   
   qemu-system-x86_64 -s -S kernel.bin
   gdb -q
   -> target remote localhost:1234
   -> symbol-file kernel.o

If global variables are not working in the kernel,
make sure everything has been compiled like
   gcc -fno-pie -m32 -ffreestanding -c kmain.c -o kmain.o
   ld -m elf_i386 -o kmain.bin -T link.ld kmain.o --oformat binary
   where link.ld contains
   OUTPUT_FORMAT(elf32-i386)
   ETNRY(kmain)
   SECTIONS(
      . = 0x1000;
      .text : { *(.text) }
      .data : { *(.data) }
      .bss  : { *(.bss ) }
   }
   This is mainly caused by the improper address being loaded for
   the global variable's address.   
