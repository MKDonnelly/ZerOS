                           ZerOS
                        Always First
                        Always Best
                       Always Powerful
------------------------------------------------------------------

Release numbers
   The general release number is <major>.<minor>
   <major> indicates a radical change in the 
   underlying kernel. <minor> indicates incremental
   features and testing. NOTE: Any tagged version
   has undergone reasonably extensive testing to
   ensure that it boots in both the emulator and
   real hardware. It is meant to be a fallback in
   the case where something is going wrong in the
   testing branch.

Directory structure
   -> bootfiles
      Files related to booting with grub are here
      (such as grub.cfg and the custom initrd)
   -> cpu
      Anything related to how the cpu operates,
      such as interrupts and halting, goes here.
   -> drivers
      Anything related to controlling a piece of 
      hardware that is not the cpu goes here.
   -> fs
      Anything related to a filesystem goes here
   -> kernel
      Anything related to the basic kernel 
      functionality, such as scheduling or memory
      management, goes here.
   -> lib
      Any useful routines that are not hardware
      specific or core kernel functions.
   -> tools
      External programs that are not linked into 
      the final kernel image. For example, a custom
      initrd generator.      

Dependencies:
   Certain subsystems in the kernel require other
   parts to be working before it can be fully used.

------------------------------------------------------
                      Coding Style

Notation for constants:
   -> #define <something>_P = This is a port
   -> #define <something>_C = This is a command
   -> #define <something>_M = This is a bit mask

Variables should be declared using snake case, not
   camel case.

Opening curly braces go at the end of the line i.e.
   for(...){
NOT
   for(...)
   {

"/*" and "*/" should not be used for single line comments
   if possible, use "//" instead as it is easier when
   commenting out code when debugging.

Functions have a standard header like 
/*
   This function does such and such
   Params
      input 1 - First input
      input 2 - Second input
   Return
      Returns such and such value
      Returns NULL on error
*/
