Multitasking
   Move the kernel stack to the end of the heap
      so that when we map the pages, we can identity
      map up to the end of the heap, then we can do
      page_directory_t *savedKernelMap = current_identity_mapped_dir;
      page_directory_t *kernelMapWithStack = clone_directory(savedKernelMap)
      load_directory( kernelMapWithStack )
      page_map_auto( <kernel stack area> ...)
      Then a fork() from the kernel can use the savedKernelMap
   Create a separate area for allocating thread stack
      space. Place a guard page at the end of each so that
      a page fault ocurrs if one exceeds its stack size
   Work on threading code
      separate scheduling and threading code
      create thread synchronization constructs, messages

printing/screen manipulation:
  Implement a frame buffer in 3h mode
     Add function to scroll.c to scroll both ways
  Better utilize vga colors in 3h mode
      (see https://github.com/JonathanSalwan/Kaminou-Kernel/blob/master/kernel/includes/sys/video.h)
     Allow arrow keys to scroll through buffer 
  Work on VGA 13h mode driver
     Implement basic shape drawing
     Later on, implement a frame buffer
  Create better print output (BUG,LOG,ASSERT,etc)
      and catch errors by using __FILE__ and __LINE__
      use assert more in code 
  Get a dump of the vga font and create custom font 
  Add more vga register modes
  Get arrow keys to work on terminal
  Unify all of the screen operations into printf and have escape 
     sequences dictate cursor position, color, etc
  use hwinfo --framebuffer to see and program video modes
    also use grub gfx directive to boot into a higher video mode

utils:
   Create a basic file editor by dumping a file into the
      frame buffer and copying it back once done.
   create simple games (pong, etc)

dynamic memory
   Create a slab allocator (have fixed size block ready)
   Stress-test kmalloc
   Create several memory allocation algorithms
   Abstract the heap so that multiple 
      heaps can coexist
      create_heap( <start addr>, size, allocator );
   get unify_heap working or eliminate it
   Advanced malloc idea: have malloc return a double pointer.
      malloc will maintain the second pointer. This way, malloc
      can change where each piece of dynamic memory lies transparent
      to the external process.
 
initrd
   Add directory support to initrd and improve
      initrd code
   Copy the initrd over to some space of memory
      so that it is not overwritten. Or at least
      page-protect it.
   load basic binary from initrd and execute
 
misc:   
   Implement APIC, HPET, user mode, ATA PIO mode driver,
      PCI driver, network card driver,  
   Mouse driver
   Make a cross compiler
   Unit tests for various subsystems
   Add a how-to to explain how each subsystem works
      Add examples for each subsystem for reference
      and list the dependencies
   Make as much as possible work through the VFS 
   Add and use abstract linked list for managing data
   Get proper release/press code working with keyboard
   Work on multiboot header and understand
      what each field is doing
   Create /dev virtual directory
   create function to invalidate a page
      asm volatile ("invlpg (%0)" : : "b" (page_addr) : "memory")
   Add random number generator
   Add a basic md5 sum function
   Try to boot UEFI with grub-efi
   Add cpuid functions
   Use timer channel 2 to play sound on pc speaker
   Create system calls using interrupts
   work on arm arch code with qemu-arm
