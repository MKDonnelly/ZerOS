Try re-writing in c++ and utilize objects, STL
Multitasking
   program execution
      work on elf linking and loading
      READ MAN ELF!
   Look into what vDSO is (man vdso)
   create systemcall interface 
      for blocking system calls, we need to push the kernel-mode state
      onto the stack and then switch to another thread.
   Symmetric Multi Processing (SMP) (see intel multiprocessor spec)
   Work on scheduler
   Add name to task_t
   Utilize page faults better (kill task that makes a page fault,etc)
   In several places, I think I assume that the kernel and userland program
      are operating under two different page tables. That is incorrect. 
      Keep in mind that reading a string from userland in kernelland
      just means we directly access the memory.

drivers
   APIC, HPET, ATA non-PIO mode, PCI, network card
   basic ext2 filesystem

make a modular kernel
priority lock based on priority queue implemented as min heap
make a queue-based mutex
Use kassert often

Heap ideas
   - Add in hints (i.e. this memory will be temp, or long term)
   - Add in allocator pre-allocs (i.e. we will need to allocate 100 4k
                                       frames in the future, prepare)

printing/screen manipulation:
  Double buffering, frame buffer
  VGA 13h mode driver (shapes, graphics)
  Get a dump of the vga font and create custom font 
  Add more vga register modes (get higher res dumps using qemu)
  use hwinfo --framebuffer to see and program video modes
    also use grub gfx directive to boot into a higher video mode
  make routines for 1024x768 graphics mode (set by multiboot header)

misc tasks 
   use syscall/sysret instead of interrupt
   Create /dev virtual directory
   port zeros to xen
   port over a c library (newlib, uClib, musl)
   Add a how-to to explain how each subsystem works
   Add examples for each subsystem for reference
      and list the dependencies
   Create a slab allocator to be placed over the generic
      heap. e.g. paging stuff requires a lot of 4K pages
      aligned on 4K; have a slab allocator catch those and
      have the generic slab as a backup
   Let heap code accept hints. i.e. this memory will be allocated
      for a long/short time, expands/does not expand, etc. Have long
      term allocations start at head of memory, and short term allocations
      start at the end of memory. They then grow towards one another.

advanced os examples:
   dragonfly bsd, minix, plan9, genode, haiku, helenos, redox

low-priority
   add random number generator
   Get proper release/press code working with keyboard
   use timer channel 2 to play sound on pc speaker
   work on arm arch code with qemu-arm
