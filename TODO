Multitasking
   program execution
      work on elf linking and loading
      READ MAN ELF!
      For some reason, the program header offset is 0
         when doing a default link with no linker script
         Links to the same address w/ the default address
         do as well, but other address work fine.
   create systemcall interface 
   Symmetric Multi Processing (SMP) (see intel multiprocessor spec)
   Work on scheduler
   Create message passing interface and shared memory for IPC
   Add name to task_t
   Utilize page faults better (kill task that makes a page fault,etc)
   create a task pool for fast task creation
   In userland, extend the idea of interrupts to that of signals;
      have userland programs register various events that should trigger
      and interrupt and have handler functions to catch it.

filesystem
   use inodes as the interface between the VFS and the file system

drivers
   APIC, HPET, ATA non-PIO mode, PCI, network card
   basic ext2 filesystem

make a modular kernel
priority lock based on priority queue implemented as min heap
make a queue-based mutex
Use kassert often
Clean up the types (i.e. use size_t for arch stuff used in kernel)
Re-write assembly programs to use GNU as; this way, we can include
 constants from a c program more easily

misc tasks 
   use syscall/sysret instead of interrupt
   Create /dev virtual directory
   port zeros to xen
   port over a c library (newlib, uClib, musl)
   look into the timestamp counter 
   Add a how-to to explain how each subsystem works
   Add examples for each subsystem for reference
      and list the dependencies
   Create a slab allocator to be placed over the generic
      heap. e.g. paging stuff requires a lot of 4K pages
      aligned on 4K; have a slab allocator catch those and
      have the generic slab as a backup

advanced os examples:
   dragonfly bsd, minix, plan9, genode, haiku, helenos, redox

low-priority
   add random number generator, md5 sum function
   add in arch-specific bitwise operators, optimizations (AVX, SIMD, etc)
   Get proper release/press code working with keyboard
   use timer channel 2 to play sound on pc speaker
   work on arm arch code with qemu-arm

printing/screen manipulation:
  Double buffering, frame buffer
  VGA 13h mode driver (shapes, graphics)
  Get a dump of the vga font and create custom font 
  Add more vga register modes (get higher res dumps using qemu)
  use hwinfo --framebuffer to see and program video modes
    also use grub gfx directive to boot into a higher video mode
  make routines for 1024x768 graphics mode (set by multiboot header)

initrd
   Add in cpio or tar support
   Add directory support to initrd
