Multitasking
   program execution
      work on elf linking and loading
      READ MAN ELF!
      For some reason, the program header offset is 0
         when doing a default link with no linker script
         Links to the same address w/ the default address
         do as well, but other address work fine.
   create systemcall interface 
   Symmetric Multi Processing (SMP)
   Work on scheduler
   Create message passing interface and shared memory for IPC
   Add name to task_t
   Utilize page faults better (kill task that makes a page fault,etc)

drivers
   APIC, HPET, ATA non-PIO mode, PCI, network card
   basic ext2 filesystem

make a modular kernel
priority lock based on priority queue implemented as min heap
make a queue-based mutex
Use kassert often
Database-fs: Within a file, create a key-value store to associate
             a certain key with a block of data.

printing/screen manipulation:
  Double buffering, frame buffer
  VGA 13h mode driver (shapes, graphics)
  Get a dump of the vga font and create custom font 
  Add more vga register modes (get higher res dumps using qemu)
  use hwinfo --framebuffer to see and program video modes
    also use grub gfx directive to boot into a higher video mode
  make routines for 1024x768 graphics mode (set by multiboot header)

misc tasks 
   use syscall/sysret instead of interrupt
   port zeros to xen
   port over a c library (newlib, uClib, musl)
   Add a how-to to explain how each subsystem works
   Add examples for each subsystem for reference
      and list the dependencies

advanced os examples:
   dragonfly bsd, minix, plan9, genode, haiku, helenos, redox

low-priority
   add random number generator, md5 sum function
   add in arch-specific bitwise operators, optimizations (AVX, SIMD, etc)
   Get proper release/press code working with keyboard
   use timer channel 2 to play sound on pc speaker
   work on arm arch code with qemu-arm


