Multitasking
   Create a separate area for allocating thread stack
      space. Place a guard page at the end of each so that
      a page fault ocurrs if one exceeds its stack size
   SMP
   Work on threading code
      improve scheduler (queues, priority, different algs)
      create thread synchronization constructs, messages
         use xchg to implement mutexes
      make sure core functions (kmalloc, scheduling) cannot
         be interrupted and corrupted using either cli/sti or locks
      get a task exit without an explicit call to exit_task to work
   program execution
      create symbol table for dynamic linker
      elf file parser

paging
   layout memory better
   use page faults better (i.e. map in page if a stack overflows,
      kill processes that make illegal memory access, etc)
   make routine for mapping areas of memory, creating
      userland page directory

userland
   create system call interface
   move some drivers to userland
   use syscall/sysret instead of interrupt

dynamic memory
   Stress-test kmalloc
   kzmalloc
   Implement memory allocation algorithms
      Buddy allocator
      Create a slab allocator (have fixed size block ready)
 
initrd
   Add in cpio or tar support
   Add directory support to initrd and improve code

printing/screen manipulation:
  Double buffering
  Add escape sequences for vga colors in 3h mode
  Work on VGA 13h mode driver
     Implement basic shape drawing
     Later on, implement a frame buffer
  Get a dump of the vga font and create custom font 
  Add more vga register modes (get higher res dumps using qemu)
  use hwinfo --framebuffer to see and program video modes
    also use grub gfx directive to boot into a higher video mode
  make routines for 1024x768 graphics mode (set by multiboot header)

documentation/testing
   Unit tests for various subsystems
   Add a how-to to explain how each subsystem works
      Add examples for each subsystem for reference
      and list the dependencies
   Set variables to trace dependency problems in kernel
      (i.e. make sure if the heap is not setup, we do not
      try to use it and throw an error)
   Make all code conform to coding style in README
   Create better print output (BUG,LOG,ASSERT,etc)
      and catch errors by using __FILE__ and __LINE__
      use assert more in code 
   Clean up all of the circular #includes

drivers
   APIC, HPET, PCI, network card
   basic ext2 filesystem, CMOS
 
misc tasks 
   use a cross compiler
   Create /dev virtual directory
   Get proper release/press code working with keyboard
   create function to invalidate a page
      asm volatile ("invlpg (%0)" : : "b" (page_addr) : "memory") 
   make as much as possible work through the VFS 
   port zeros to xen
   make BGA driver
   add in arch-specific bitwise operators, optimizations (AVX, SIMD, etc)
   port over a c library (newlib, uClib, or something else small)

advanced os examples:
   dragonfly bsd, minix, plan9, genode, haiku, helenos, redox

low-priority
   write oneshot for timer callback code
   add random number generator, md5 sum function
   try to boot UEFI with grub-efi
   add cpuid functions
   use timer channel 2 to play sound on pc speaker
   work on arm arch code with qemu-arm
