currently working on threads and processes
   Move the kernel stack to the end of the heap
      so that when we map the pages, we can identity
      map up to the end of the heap, then we can do
      page_directory_t *savedKernelMap = current_identity_mapped_dir;
      page_directory_t *kernelMapWithStack = clone_directory(savedKernelMap)
      load_directory( kernelMapWithStack )
      page_map_auto( <kernel stack area> ...)
      Then a fork() from the kernel can use the savedKernelMap
   Create a separate area for allocating thread stack
      space. Place a guard page at the end of each so that
      a page fault ocurrs if one exceeds its stack size
   Fix the uneven scheduling with threads (07_Simple_RR is an example
      of an os that has very fair scheduling. Try to mimic it)

clean up:
  Create a code standard
  Organize files like Benu 

=================================
printing/screen manipulation:
  Implement a frame buffer in 3h mode
     Add function to scroll.c to scroll both ways
     Allow arrow keys to scroll through buffer 
  Work on VGA 13h mode driver
     Implement basic shape drawing
     Later on, implement a frame buffer
  Better utilize vga colors in 3h mode
      (see https://github.com/JonathanSalwan/Kaminou-Kernel/blob/master/kernel/includes/sys/video.h)
   Create better print output (BUG,LOG,ASSERT,etc)
      and catch errors by using __FILE__ and __LINE__
  Get a dump of the vga font and create custom font 
  Add more vga register modes
  Get arrow keys to work on terminal
  Improve format capabilities of k_printf
     print string,format specifiers

utils:
   Create a basic file editor by dumping a file into the
      frame buffer and copying it back once done.
   List files in initrd
   Write a simple shell
   Create a /programs directory to house demo programs
   create simple games (pong, etc)
   Make visual effects (digital rain, scrolling letters,etc)

misc:   
   Unit tests for various subsystems
  Fix the delay code (randomly waits longer)
   Add a how-to to explain how each subsystem works
      Add examples for each subsystem for reference
      and list the dependencies
   Work on kmalloc
      Create a slab allocator (have fixed size block ready)
      Stress-test kmalloc
      Abstract the heap so that multiple 
         heaps can coexist
      Create several memory allocation algorithms
   Add alarms to timer subsystem by using an array
      of functions as callbacks (like interrupts)
   Create a keyboard function callback
   Handle backspaces in keyboard buffer
   Get proper release/press code working with keyboard
   Add alarms to timer subsystem
   Work on multiboot header and understand
      what each field is doing
   Add directory support to initrd and improve
      initrd code
   Copy the initrd over to some space of memory
      so that it is not overwritten. Or at least
      page-protect it.
   Create /dev virtual directory
   create function to invalidate a page
      asm volatile ("invlpg (%0)" : : "b" (page_addr) : "memory")
   Add random number generator
   Add a basic md5 sum function
   Add a getc function and add max length to getline, fix getline
   Use structures to hold more information in devices
   Try to boot UEFI with grub-efi
   Add cpuid functions
   Learn qemu to better debug the kernel
   Use timer channel 2 to play sound on pc speaker
   Implement APIC
   Implement HPET
   Implement user mode
   Create system calls using interrupts

obsolete:
Impelement call gate
   Add GDT descriptor w/ CPL = 3 and type of
   trap gate to a function as the base and limit
   call using 
          jmp <GDT offset>:0x0
 
