dynamic memory
   Create a slab allocator (have fixed size block ready)
   Stress-test kmalloc
   Create several memory allocation algorithms by abstracting
      the algorithm to deal with only a range of memory addrs
      Buddy allocator
   Better organize the kernel memory layout (i.e. heap comes
      before the stack, text is under the heap)
 
userland
   get ring 3 working
   create system call interface

initrd
   Add directory support to initrd and improve
      initrd code
   Page in the initrd since it currently cannot be accessed

paging
   handle page faults when memory runs out
   improve code where needed
   copy a page table for fork()

Multitasking
   Move the kernel stack to the end of the heap
      so that when we map the pages, we can identity
      map up to the end of the heap, then we can do
      page_directory_t *savedKernelMap = current_identity_mapped_dir;
      page_directory_t *kernelMapWithStack = clone_directory(savedKernelMap)
      load_directory( kernelMapWithStack )
      page_map_auto( <kernel stack area> ...)
      Then a fork() from the kernel can use the savedKernelMap
   Create a separate area for allocating thread stack
      space. Place a guard page at the end of each so that
      a page fault ocurrs if one exceeds its stack size
   Work on threading code
      separate scheduling and threading code
      improve scheduler (queues, priority, different algs)
      create thread synchronization constructs, messages
         use xchg to implement mutexes
      make sure core functions (kmalloc, scheduling) cannot
         be interrupted and corrupted using either cli/sti or locks

printing/screen manipulation:
  Implement a frame buffer in 3h mode
     Add function to scroll.c to scroll both ways
  Abstract printf from out of the arch code
  Use vfs to have printf operate through screen and serial
     the same
  Better utilize vga colors in 3h mode
      (see https://github.com/JonathanSalwan/Kaminou-Kernel/blob/master/kernel/includes/sys/video.h)
     Allow arrow keys to scroll through buffer 
  Work on VGA 13h mode driver
     Implement basic shape drawing
     Later on, implement a frame buffer
  Create better print output (BUG,LOG,ASSERT,etc)
      and catch errors by using __FILE__ and __LINE__
      use assert more in code 
  Get a dump of the vga font and create custom font 
  Add more vga register modes (have grub boot into various
      modes and record the register values. we can boot from
      a usb drive so grub is actually run and not emulated
      by qemu)
  Get arrow keys to work on terminal
  Unify all of the screen operations into printf and have escape 
     sequences dictate cursor position, color, etc
  use hwinfo --framebuffer to see and program video modes
    also use grub gfx directive to boot into a higher video mode

utils
   Create a basic file editor by dumping a file into the
      frame buffer and copying it back once done.
   create simple games (pong, etc)
   create tar, cpio parser
 
program execution
   create symbol table for dynamic linker
   elf file parser
   load and exec flat binaries (c and assembly) from initrd

documentation/testing
   Unit tests for various subsystems
   Add a how-to to explain how each subsystem works
      Add examples for each subsystem for reference
      and list the dependencies
   Set variables to trace dependency problems in kernel
      (i.e. make sure if the heap is not setup, we do not
      try to use it and throw an error)
   Make all code conform to coding style in README

drivers
   APIC, HPET, ATA PIO mode, PCI, network card
   basic ext2 filesystem
   mouse, CMOS, serial,  
 
misc tasks 
   convert inline assembly to assembly-only file
   use a cross compiler
   Create /dev virtual directory
   Get proper release/press code working with keyboard
   create function to invalidate a page
      asm volatile ("invlpg (%0)" : : "b" (page_addr) : "memory") 
   make as much as possible work through the VFS 

low-priority
   add in arch-specific bitwise operators
   write oneshot for timer callback code
   add random number generator, md5 sum function
   try to boot UEFI with grub-efi
   add cpuid functions
   use timer channel 2 to play sound on pc speaker
   work on arm arch code with qemu-arm
